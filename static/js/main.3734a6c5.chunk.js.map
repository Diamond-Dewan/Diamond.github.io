{"version":3,"sources":["components/Header.js","context/TodoListContext.js","components/Task.js","components/CompletedTask.js","components/TaskList.js","components/AddTask.js","components/TabSwitch.js","App.js","index.js"],"names":["Header","props","AppBar","position","mt","style","marginTop","color","Box","py","Typography","variant","align","children","initialState","tasks","id","title","done","TodoListContext","createContext","reducer","state","action","type","payload","filter","task","TodoListContextProvider","useReducer","dispatch","Provider","value","addTask","removeTask","updateTask","Task","useContext","useState","currentTask","setCurrentTask","React","open","setOpen","handleClose","handleFormSubmit","e","preventDefault","borderRadius","boxShadow","my","ListItem","ListItemText","primary","ListItemSecondaryAction","IconButton","onClick","size","edge","aria-label","aria-controls","marginRight","Edit","fontSize","Clear","Dialog","maxWidth","onClose","aria-labelledby","fullWidth","DialogTitle","DialogContent","FormControl","margin","disabled","Input","onKeyPress","key","autoFocus","onChange","target","placeholder","FormControlLabel","label","control","Checkbox","checked","icon","FavoriteBorder","checkedIcon","Favorite","DialogActions","display","Button","float","endIcon","SendTwoTone","prototype","PropTypes","object","isRequired","CompletedTask","TaskList","List","map","Zoom","in","array","useStyles","makeStyles","theme","appBar","top","bottom","fabButton","zIndex","left","right","AddTask","classes","setValue","newTask","Math","floor","random","Fragment","className","Tooltip","Fab","Add","event","TabPanel","index","other","component","role","hidden","p","a11yProps","TabSwitch","completedTask","inCompletedTask","useTheme","Paper","Tabs","newValue","indicatorColor","textColor","Tab","WorkRounded","WorkOffRounded","axis","direction","onChangeIndex","dir","App","CssBaseline","Container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3734a6c5.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {Box} from \"@material-ui/core\";\n\nfunction Header(props) {\n    return (\n        <AppBar position={\"sticky\"} mt={3} style={{marginTop: '0.5em'}} color={\"primary\"}>\n            <Box py={2}>\n                <Typography variant='h4' align='center' children='To Do List'/>\n            </Box>\n        </AppBar>\n    );\n}\n\nexport default Header;","import React, {createContext, useReducer } from 'react';\n\n// state\nconst initialState = {\n    tasks: [\n        {id:0, title: \"Buy Some Food\", done: false},\n        {id:1, title: \"Work On Hobby Project\", done: false},\n        {id:2, title: \"Done Project\", done: true},\n\n    ]\n};\n\n// create context\nexport const TodoListContext = createContext(initialState);\n\n// reset to default\n// const reset = (initialState) => {\n//     return {tasks: initialState};\n// };\n\n// reducer\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'ADD_TASK':\n            return {\n                ...state,\n                tasks: [...state.tasks, action.payload]\n            };\n\n        case 'DELETE_TASK':\n            return {\n                ...state,\n                tasks: state.tasks.filter(task => task.id !== action.payload)\n            };\n\n        case 'UPDATE_TASK':\n            const tasks = state.tasks.filter(task => {\n                if(task.id === action.payload.id) {\n                    task.id = action.payload.id;\n                    task.title = action.payload.title;\n                    task.done = action.payload.done;\n                }\n                return task;\n            });\n            return {\n                ...state,\n                tasks: tasks\n            };\n\n        default:\n            return state;\n    }\n};\n\n// Provider\nfunction TodoListContextProvider({children}) {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    // provider functions\n    const addTask = (task) => dispatch({ type: 'ADD_TASK', payload: task });\n    const removeTask = (id) => dispatch({type: 'DELETE_TASK', payload: id});\n    const updateTask = (task) => dispatch({type: 'UPDATE_TASK', payload: task});\n\n    return (\n        <TodoListContext.Provider value={{\n            tasks: state.tasks,\n            addTask,\n            removeTask,\n            updateTask}}\n        >\n            {children}\n        </TodoListContext.Provider>\n    );\n}\n\nexport default TodoListContextProvider;","import React, {useContext, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from \"@material-ui/core/Box\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Clear, Edit, SendTwoTone, FavoriteBorder, Favorite} from \"@material-ui/icons\";\nimport {Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {TodoListContext} from \"../context/TodoListContext\";\n\nfunction Task(props) {\n    const { task } = props;\n    const { updateTask, removeTask } = useContext(TodoListContext);\n\n    // create current task state\n    const [currentTask, setCurrentTask] = useState({\n        id: task.id,\n        title: task.title,\n        done: task.done\n    });\n\n    // popUp form operations\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        updateTask(currentTask);       // add to state\n        handleClose();      // close form\n    };\n\n    return (\n        <Box borderRadius=\"borderRadius\" boxShadow={2} my={1}>\n            <ListItem>\n                <ListItemText primary={task.title} />\n                <ListItemSecondaryAction>\n                    <IconButton onClick={handleClickOpen} size={\"small\"} edge=\"end\" aria-label=\"more\" aria-controls=\"menu\" style={{marginRight: '0.5em'}}>\n                        <Edit fontSize={\"small\"} color={\"primary\"}/>\n                    </IconButton>\n                    <IconButton onClick={() => removeTask(task.id)} size={\"small\"} edge=\"end\" aria-label=\"more\" aria-controls=\"menu\">\n                        <Clear fontSize=\"default\" color={\"secondary\"}/>\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>\n\n            <Dialog open={open} maxWidth={\"sm\"} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\n                <DialogTitle id=\"form-dialog-title\">Editing: `{task.title}`</DialogTitle>\n                <DialogContent>\n                    {/* Task form */}\n                    <FormControl size={\"medium\"} margin={\"normal\"} disabled fullWidth>\n                        <Input value={currentTask.id}/>\n                    </FormControl>\n\n                    <FormControl onKeyPress={(e) => e.key === \"Enter\" ? handleFormSubmit(e) : false } size={\"medium\"} margin={\"normal\"} fullWidth>\n                        <Input autoFocus value={currentTask.title} onChange={e => setCurrentTask({...currentTask, title: e.target.value})} type='text' placeholder=\"Add New Task\"/>\n                    </FormControl>\n\n                    <FormControlLabel\n                        label=\"Done\"\n                        control={ <Checkbox checked={currentTask.done} onChange={e => setCurrentTask({...currentTask, done: e.target.checked})} icon={<FavoriteBorder />}\n                            checkedIcon={<Favorite />}\n                        />}\n                    />\n                    {/*Task Form ends*/}\n                </DialogContent>\n                <DialogActions display={'flex'}>\n                    <Button float={'left'} onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleFormSubmit} color=\"primary\" endIcon={<SendTwoTone/>}>\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n}\n\nTask.prototype = {\n    task: PropTypes.object.isRequired\n};\n\nexport default Task;","import React, {useContext, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from \"@material-ui/core/Box\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Clear, Edit, SendTwoTone, FavoriteBorder, Favorite} from \"@material-ui/icons\";\nimport {Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {TodoListContext} from \"../context/TodoListContext\";\n\nfunction CompletedTask(props) {\n    const { task } = props;\n    const { updateTask, removeTask } = useContext(TodoListContext);\n\n    // create current task state\n    const [currentTask, setCurrentTask] = useState({\n        id: task.id,\n        title: task.title,\n        done: task.done\n    });\n\n    // popUp form operations\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        updateTask(currentTask);       // add to state\n        handleClose();      // close form\n    };\n\n    return (\n        <Box borderRadius=\"borderRadius\" boxShadow={2} my={1}>\n            <ListItem>\n                <ListItemText primary={<del>{task.title}</del>} />\n                <ListItemSecondaryAction>\n                    <IconButton onClick={handleClickOpen} size={\"small\"} edge=\"end\" aria-label=\"more\" aria-controls=\"menu\" style={{marginRight: '0.5em'}}>\n                        <Edit fontSize={\"small\"} color={\"primary\"}/>\n                    </IconButton>\n                    <IconButton onClick={() => removeTask(task.id)} size={\"small\"} edge=\"end\" aria-label=\"more\" aria-controls=\"menu\">\n                        <Clear fontSize=\"default\" color={\"secondary\"}/>\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>\n\n            <Dialog open={open} maxWidth={\"sm\"} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\n                <DialogTitle id=\"form-dialog-title\">Editing: `{task.title}`</DialogTitle>\n                <DialogContent>\n                    {/* Task form */}\n                    <FormControl size={\"medium\"} margin={\"normal\"} disabled fullWidth>\n                        <Input value={currentTask.id}/>\n                    </FormControl>\n\n                    <FormControl onKeyPress={(e) => e.key === \"Enter\" ? handleFormSubmit(e) : false } size={\"medium\"} margin={\"normal\"} fullWidth>\n                        <Input autoFocus value={currentTask.title} onChange={e => setCurrentTask({...currentTask, title: e.target.value})} type='text' placeholder=\"Add New Task\"/>\n                    </FormControl>\n\n                    <FormControlLabel\n                        label=\"Done\"\n                        control={ <Checkbox checked={currentTask.done} onChange={e => setCurrentTask({...currentTask, done: e.target.checked})} icon={<FavoriteBorder />}\n                                            checkedIcon={<Favorite />}\n                        />}\n                    />\n                    {/*Task Form ends*/}\n                </DialogContent>\n                <DialogActions display={'flex'}>\n                    <Button float={'left'} onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleFormSubmit} color=\"primary\" endIcon={<SendTwoTone/>}>\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n}\n\nCompletedTask.prototype = {\n    task: PropTypes.object.isRequired\n};\n\nexport default CompletedTask;","import React from 'react';\nimport Task from \"./Task\";\nimport CompletedTask from \"./CompletedTask\";\n\nimport PropTypes from 'prop-types';\nimport List from \"@material-ui/core/List\";\nimport Zoom from \"@material-ui/core/Zoom\";\n\n\nfunction TaskList({tasks}) {\n    return (\n        <List>\n            {tasks.map(task =>(\n                task.done ? <Zoom in={true}><CompletedTask key={task.id} task={task}/></Zoom> : <Zoom in={true}><Task key={task.id} task={task}/></Zoom>\n                ))\n            }\n        </List>\n    );\n}\n\nTaskList.prototype = {\n    tasks: PropTypes.array.isRequired\n};\n\nexport default TaskList;","import React, {useState, useContext} from 'react';\nimport {TodoListContext} from \"../context/TodoListContext\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport {Add, SendTwoTone} from \"@material-ui/icons\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { Dialog, DialogTitle, DialogActions, DialogContent } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n    },\n    fabButton: {\n        position: 'absolute',\n        zIndex: 1,\n        top: -30,\n        left: 0,\n        right: 0,\n        margin: '0 auto',\n    }\n}));\n\nfunction AddTask() {\n    const classes = useStyles();\n    const [value, setValue] = useState('');\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const { addTask } = useContext(TodoListContext);\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        const newTask = {\n            id: Math.floor(Math.random()*100000000),\n            title: value,\n            done: false,\n        };\n        addTask(newTask);       // add to state\n        setValue('');       // reset to initial\n        handleClose();      // close form\n    };\n\n    return (\n        <React.Fragment>\n            <AppBar onClick={handleClickOpen} position=\"relative\" color=\"primary\" className={classes.appBar}>\n                <Tooltip title={'Add Task'}>\n                    <Fab color=\"secondary\" aria-label=\"add\" className={classes.fabButton}>\n                        <Add />\n                    </Fab>\n                </Tooltip>\n            </AppBar>\n\n            <Dialog open={open} maxWidth={\"sm\"} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\n                <DialogTitle id=\"form-dialog-title\">Add New Task</DialogTitle>\n                <DialogContent>\n                    {/* Task form */}\n                    <FormControl onKeyPress={(e) => e.key === \"Enter\" ? handleFormSubmit(e) : false } size={\"medium\"} margin={\"normal\"} fullWidth>\n                        <Input autoFocus value={value} onChange={event => setValue(event.target.value)} type='text' placeholder=\"Add New Task\"/>\n                    </FormControl>\n                    {/*Task Form ends*/}\n                </DialogContent>\n                <DialogActions display={'flex'}>\n                    <Button float={'left'} onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleFormSubmit} color=\"primary\" endIcon={<SendTwoTone/>}>\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n\nexport default AddTask;","import React, {useContext} from 'react';\nimport PropTypes from 'prop-types';\nimport SwipeableViews from \"react-swipeable-views\";\nimport { useTheme } from '@material-ui/core/styles';\nimport {Tabs, Tab} from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport {WorkRounded, WorkOffRounded} from \"@material-ui/icons\";\n\nimport TaskList from \"./TaskList\";\nimport AddTask from \"./AddTask\";\nimport {TodoListContext} from \"../context/TodoListContext\";\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `full-width-tab-${index}`,\n        'aria-controls': `full-width-tabpanel-${index}`,\n    };\n}\n\nexport default function TabSwitch() {\n    const {tasks} = useContext(TodoListContext);\n    const completedTask = tasks.filter(task=>task.done === true);\n    const inCompletedTask = tasks.filter(task=>task.done !== true);\n\n    const theme = useTheme();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = index => {\n        setValue(index);\n    };\n\n    return (\n        <Box boxShadow={1}>\n            <Paper>\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    indicatorColor=\"secondary\"\n                    textColor=\"secondary\"\n                    variant=\"fullWidth\"\n                >\n                    <Tab icon={<WorkRounded/>} {...a11yProps(0)} />\n                    <Tab icon={<WorkOffRounded/>} {...a11yProps(1)} />\n                </Tabs>\n            </Paper>\n\n            <SwipeableViews\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                index={value}\n                onChangeIndex={handleChangeIndex}\n            >\n                <TabPanel value={value} index={0} dir={theme.direction}>\n                    <TaskList tasks={inCompletedTask} />\n                </TabPanel>\n                <TabPanel value={value} index={1} dir={theme.direction}>\n                    <TaskList tasks={completedTask}/>\n                </TabPanel>\n            </SwipeableViews>\n\n            {/* add task */}\n            <AddTask/>\n            {/* add task*/}\n        </Box>\n    );\n}\n","import React from 'react';\nimport Header from \"./components/Header\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport TabSwitch from \"./components/TabSwitch\";\nimport TodoListContextProvider from \"./context/TodoListContext\";\n\nfunction App() {\n  return (\n      <TodoListContextProvider>\n          <CssBaseline/>\n          <Container maxWidth='sm'>\n              <Header/>\n              <TabSwitch/>\n          </Container>\n      </TodoListContextProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}